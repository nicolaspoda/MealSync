// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Meal {
  id           String        @id @default(uuid())
  title        String
  description  String
  calories     Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  aliments     MealAliment[]
  preparations MealPreparation[]
  equipments   MealEquipment[]
  
  @@map("meals")
}

model Equipment {
  id    String @id @default(uuid())
  name  String @unique
  
  meals MealEquipment[]
  
  @@map("equipments")
}

model Preparation {
  id           String @id @default(uuid())
  step         Int
  description  String
  estimated_time Int
  
  meals MealPreparation[]
  
  @@map("preparations")
}

model Aliment {
  id        String @id @default(uuid())
  name      String @unique
  cal_100g  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  meals     MealAliment[]
  macros    AlimentMacro[]
  
  @@map("aliments")
}

model Macro {
  id    String @id @default(uuid())
  name  String @unique
  
  aliments AlimentMacro[]
  
  @@map("macros")
}

model MealAliment {
  mealId    String
  alimentId String
  quantity  Float
  
  meal      Meal    @relation(fields: [mealId], references: [id], onDelete: Cascade)
  aliment   Aliment @relation(fields: [alimentId], references: [id], onDelete: Cascade)
  
  @@id([mealId, alimentId])
  @@map("meal_aliments")
}

model MealPreparation {
  mealId        String
  preparationId String
  order         Int
  
  meal          Meal        @relation(fields: [mealId], references: [id], onDelete: Cascade)
  preparation   Preparation @relation(fields: [preparationId], references: [id], onDelete: Cascade)
  
  @@id([mealId, preparationId])
  @@map("meal_preparations")
}

model MealEquipment {
  mealId      String
  equipmentId String
  
  meal        Meal      @relation(fields: [mealId], references: [id], onDelete: Cascade)
  equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  
  @@id([mealId, equipmentId])
  @@map("meal_equipments")
}

model AlimentMacro {
  alimentId String
  macroId   String
  quantity  Float
  
  aliment   Aliment @relation(fields: [alimentId], references: [id], onDelete: Cascade)
  macro     Macro   @relation(fields: [macroId], references: [id], onDelete: Cascade)
  
  @@id([alimentId, macroId])
  @@map("aliment_macros")
}

model ApiKey {
  id         String @id @default(uuid())
  keyHash    String @unique
  name       String?
  createdAt  DateTime @default(now())
  lastUsedAt DateTime?
  expiresAt  DateTime?
  isActive   Boolean  @default(true)


  // key_hash     String   @unique @db.VarChar(64)
  // user_id      Int
  // name         String?  @db.VarChar(100)

  @@map("api_key")
}
